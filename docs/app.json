[{"name":"app.R","content":"library(shiny)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(xml2)\nlibrary(lubridate)\nlibrary(shinyWidgets)\nlibrary(bslib)\n\nui <- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      html, body {\n        height: 100%;\n      }\n      #map {\n        height: calc(100vh - 100px);\n        min-height: 400px;\n      }\n      .sidebar {\n        max-width: 300px;\n      }\n    \"))\n  ),\n  titlePanel(\"GPX Viewer\"),\n  sidebarLayout(\n    sidebarPanel(\n      class = \"sidebar\",\n      fileInput(\"gpx_file\", \"Upload GPX File\", accept = \".gpx\"),\n      numericInput(\"time_adjust\", \"Adjust Time (hours):\", 0, min = -23, max = 23, step = 1),\n      uiOutput(\"time_slider\"),\n      uiOutput(\"current_time\")\n    ),\n    mainPanel(\n      leafletOutput(\"map\"),\n      verbatimTextOutput(\"debug_output\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  gpx_data <- reactiveVal(NULL)\n  adjusted_times <- reactiveVal(NULL)\n\n  # Initialize an empty map\n  output$map <- renderLeaflet({\n    leaflet() %>% addTiles() %>% setView(lng = 0, lat = 0, zoom = 2)\n  })\n\n  observeEvent(input$gpx_file, {\n    req(input$gpx_file)\n    tryCatch({\n      gpx_xml <- read_xml(input$gpx_file$datapath)\n      ns <- xml_ns(gpx_xml)\n\n      gpx_time <- tryCatch({\n        as.POSIXct(xml_text(xml_find_all(gpx_xml, \"//d1:trkpt/d1:time\", ns)), format = \"%Y-%m-%dT%H:%M:%SZ\", tz = \"UTC\")\n      }, error = function(e) {\n        as.POSIXct(xml_text(xml_find_all(gpx_xml, \"//trkpt/time\")), format = \"%Y-%m-%dT%H:%M:%SZ\", tz = \"UTC\")\n      })\n\n      lat <- as.numeric(xml_attr(xml_find_all(gpx_xml, \"//d1:trkpt\", ns), \"lat\"))\n      lon <- as.numeric(xml_attr(xml_find_all(gpx_xml, \"//d1:trkpt\", ns), \"lon\"))\n\n      gpx <- st_as_sf(data.frame(time = gpx_time, lon = lon, lat = lat), \n                      coords = c(\"lon\", \"lat\"), crs = 4326)\n      gpx_data(gpx)\n      adjusted_times(gpx_time)\n\n      coords <- st_coordinates(gpx)\n      \n      leafletProxy(\"map\") %>%\n        clearShapes() %>%\n        addPolylines(lng = coords[, \"X\"], lat = coords[, \"Y\"], color = \"blue\", weight = 3) %>%\n        fitBounds(\n          lng1 = min(coords[, \"X\"]), lat1 = min(coords[, \"Y\"]),\n          lng2 = max(coords[, \"X\"]), lat2 = max(coords[, \"Y\"])\n        )\n\n      print(\"GPX data loaded and map updated\")\n    }, error = function(e) {\n      print(paste(\"Error processing GPX file:\", e$message))\n    })\n  })\n\n  observe({\n    req(gpx_data(), input$time_adjust)\n    gpx <- gpx_data()\n    adjusted_times(gpx$time + hours(input$time_adjust))\n  })\n\n  output$time_slider <- renderUI({\n    req(adjusted_times())\n    times <- adjusted_times()\n    if (length(times) == 0) {\n      return(NULL)\n    }\n    sliderInput(\n      \"time_select\",\n      \"Select Time:\",\n      min = min(times),\n      max = max(times),\n      value = min(times),\n      step = 1,\n      animate = animationOptions(interval = 500, loop = TRUE)\n    )\n  })\n\n  observe({\n    req(input$time_select, gpx_data(), adjusted_times())\n    gpx <- gpx_data()\n    adj_times <- adjusted_times()\n    selected_time <- input$time_select\n\n    # Find the index of the closest adjusted time\n    closest_index <- which.min(abs(difftime(adj_times, selected_time)))\n    current_point <- gpx[closest_index,]\n    \n    print(paste(\"Selected time:\", format(selected_time, \"%Y-%m-%d %H:%M:%S\")))\n    print(paste(\"Closest point time:\", format(current_point$time, \"%Y-%m-%d %H:%M:%S\")))\n    print(paste(\"Adjusted time:\", format(adj_times[closest_index], \"%Y-%m-%d %H:%M:%S\")))\n    print(paste(\"Marker coordinates:\", st_coordinates(current_point)[1], st_coordinates(current_point)[2]))\n\n    leafletProxy(\"map\") %>%\n      clearMarkers() %>%\n      addMarkers(data = current_point, popup = format(adj_times[closest_index], \"%Y-%m-%d %H:%M:%S\"))\n  })\n\n  output$current_time <- renderUI({\n    req(input$time_select)\n    wellPanel(\n      h4(\"Current Time\"),\n      p(format(input$time_select, \"%Y-%m-%d %H:%M:%S\"))\n    )\n  })\n\n  output$debug_output <- renderPrint({\n    if (!is.null(gpx_data())) {\n      gpx <- gpx_data()\n      adj_times <- adjusted_times()\n      cat(\"GPX Data Summary:\\n\")\n      print(summary(gpx))\n      cat(\"\\nNumber of points:\", nrow(gpx), \"\\n\")\n      cat(\"\\nBounding Box:\\n\")\n      print(st_bbox(gpx))\n      cat(\"\\nOriginal Time range:\\n\")\n      print(range(gpx$time))\n      cat(\"\\nAdjusted Time range:\\n\")\n      print(range(adj_times))\n      cat(\"\\nTime Adjustment (hours):\\n\")\n      print(input$time_adjust)\n      if (!is.null(input$time_select)) {\n        cat(\"\\nCurrent selected time:\\n\")\n        print(input$time_select)\n      }\n    } else {\n      cat(\"No GPX data loaded yet.\")\n    }\n  })\n}\n\nshinyApp(ui, server)","type":"text"},{"name":"README.md","content":"# webr-shinylive-gpx","type":"text"}]
